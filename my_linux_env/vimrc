"
"NOTE: how to automatic detect the file encoding set, under xterm
"   1. set encoding=utf8, set fencs=ucs-bom,utf-8,cp936
"   2. select SecureCRT->SessionOption->Terminal->Appearance->character
"   Encoding as 'UTF8'
"
" 不要使用vi的键盘模式，而是vim自己的
set nocompatible

"不使用本地版本（.g(vimrc), .exrc）
set noexrc
set cpoptions=aABceFsmq

" 语法高亮
:syntax on
filetype plugin on

" 去掉输入错误的提示声音
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" 自动缩进
set autoindent
set cindent

"复制之前缩进
set copyindent

"为C程序提供自动缩进
set smartindent

"为C/C++设置详细的信息缩进
set cinoptions={0,1s,t0,p2s,(03s,=.5s,>1s,=1s,:1s

" Tab键的宽度
set expandtab
set textwidth=79
set tabstop=4

" 统一缩进为4
set softtabstop=4
set shiftwidth=4

" 在行和段开始处使用制表符
set smarttab

"set listchars=tab:?\ ,trail:·,extends:#,nbsp:·

"默认情况下不显示不可件字符
set nolist

"highlight the current column (show vertical lines)
"highlight current line
"set cursorcolumn
set cursorline

"use many muchos levels of undo
set undolevels=1000

"当运行宏时，不重绘
set lazyredraw

" 显示行号
set number
set numberwidth=5

" 换行不截断单词
set linebreak

"记录VIM历史行数
set history=100

"禁止生成临时文件
set nobackup
set noswapfile

"每行内插入两空行(方便阅读文本)
set joinspaces

"search/replace 'globally' by default
"set gdefault

"搜索忽略大小写
set ignorecase

"搜索逐字符高亮
set hlsearch
set incsearch

" 高亮显示匹配的括号
set showmatch

" 匹配括号高亮的时间（单位是十分之一秒）
set matchtime=2

" case inferred by default
set infercase

"if there are caps,go case-sensitive
set smartcase

"注释格式化选项
set formatoptions=rq

"这三种格式支持所有
set fileformats=unix,dos

"行内替换
set gdefault

" 在编辑过程中，在右下角显示光标位置的状态行
set ruler

"在状态行显示命令行
set showcmd

" 命令行（在状态行下）的高度，默认为1
set cmdheight=1

" 带有如下符号的单词不要被换行分割
set iskeyword+=_,$,@,%,#,-

" 字符间插入的像素行数目
set linespace=0

" 增强模式中的命令行自动完成操作
set wildmenu

"忽略这些文件扩展名
set wildignore=*.dll,*.o,*.obj,*.bak,*.exe,*.pyc,*.jpg,*.gif,*.png,*.swp,*.class

"增强模式打开列表
set wildmode=list:longest

" 使回格键（backspace）正常处理indent, eol, start等
set backspace=indent,eol,start

" 允许backspace和光标键跨越行边界
set whichwrap+=b,s,h,l<,>,~,[,]
" ']' Insert and Replace
" '[' Insert and Replace
" '~' Normal
" '>' <Right> Normal and Visual
" '<' <Left> Normal and Visual
" 'l' Normal and Visual (no recommended)
" 'h' Normal and visual (no recommended)
" 's' <Space> Normal and Visual
" 'b' <BS> Normal and Visual

"隐藏buff非关闭它
set hidden

"显示已打开窗口，快速修复缓冲区，而不是打开新文件
set switchbuf=useopen

" 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）
"set mouse=a
set selection=exclusive
"set selectmode=mouse,key

" 通过使用: commands命令，告诉我们文件的哪一行被改变过
set report=0

" 在被分割的窗口间显示空白，便于阅读
set fillchars=vert:\ ,stl:\ ,stlnc:\

"光标移动到无效位置
"set virtualedit=all
set virtualedit=block

" 光标移动到buffer的顶部和底部时保持3行距离
set scrolloff=3

"keep 5 lines at the size
set sidescrolloff=10

"缩短消息，避免按键提示
set shortmess=aOstT

"禁用mode lines (安全措施）
set nomodeline

"自动写入缓冲区
set autowrite

"设置当文件被外部改变的时候自动读入文件
if exists("&autoread")
set autoread
endif

"编码设置
set enc=utf-8
set fencs=ucs-bom,utf-8,cp936

"语言设置
set langmenu=zh_CN.UTF-8
set helplang=cn

" 保存全局变量
set viminfo+=!

"session options
set sessionoptions=blank,buffers,curdir,folds,resize,winpos,winsize

set viminfo='10,\"100,:20,%,n~/.viminfo

" 侦测文件类型
filetype on

" 载入文件类型插件
filetype plugin on
set grepprg=grep\ -nH\ $*

" 为特定文件类型载入相关缩进文件
filetype indent on
set nocp

"---------------------------------------------------------------------------
"配置各种文件类型的扩展标签
au BufEnter * :syntax sync minlines=200
au BufNewFile,BufRead *.txt set ft=rst textwidth=78
"au BufNewFile,BufRead *vimrc,*gvimrc set list
"au BufNewFile,BufRead *.part set ft=xhtml
"au BufNewFile,BufRead *.html set ft=xhtml
"au BufNewFile,BufRead *.scss set ft=css
"au BufNewFile,BufRead *.sl set ft=lisp
"au BufNewFile,BufRead *.lsp,*.lisp,*.cl set ft=lisp
au BufNewFile,BufRead *.c set noexpandtab
au BufNewFile,BufRead *.h set noexpandtab
"au BuFNewFile,BufRead *.js set ft=javascript
"au BufNewFile,BufRead *.rb,*.rhtml set shiftwidth=2
"au BufNewFile,BufRead *.rb,*.rhtml set softtabstop=2
au BufNewFile,BufRead Makefile* set noexpandtab
" Automatically chmod +x Shell and script
"au BufWritePost *.sh !chmod +x %
"au BufWritePost *.pl !chmod +x %
"au BufWritePost *.py !chmod +x %
"Automatically source
autocmd BufWritePost ~/.vimrc :source %
"autocmd BufWritePost ~/.bashrc :source %
au BufReadPost *
\ if line("'\"") > 0 && line("'\"") <= line("$") |
\ exe "normal! g`\"" |
\ endif

au WinEnter * setlocal cursorline
au WinLeave * setlocal nocursorline

autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | endif
autocmd InsertLeave,WinLeave * if exists('w:last_fdm') | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif

"---------------------------------------------------------------------------
"set OminComplet

if has("autocmd")

autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType htmldjango.html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType python call PythonLoad()
autocmd FileType c set omnifunc=ccomplete#Complete
autocmd FileType ada set omnifunc=adacomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType java set omnifunc=javacomplete#Complete
autocmd FileType java call JavaLoad()
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType phtml set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Completeruby
autocmd FileType ruby,eruby call RubyLoad()
autocmd FileType sql set omnifunc=sqlcomplete#Completesql
endif

"---------------------------------------------------------------------------
" 状态行显示的内容（包括文件类型和解码)
let g:git_branch_status_head_current=1
let g:git_branch_status_text=""
" let g:git_branch_status_around=""

set laststatus=2
" set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}
" highlight StatusLineNC ctermfg=lightgray ctermbg=black

function! CurDir()
let curdir = substitute(getcwd(), $HOME, "~", "g")
    return curdir
endfunction
set statusline=file:\ %F%m%r%h%w\ [POS=%l,%v][%p%%]
highlight StatusLine cterm=bold ctermfg=yellow ctermbg=blue

if has('title')
set titlestring=%t%(\ [%R%M]%)
endif

"---------------------------------------------------------------------------
"折叠设置

" 开始折叠
set foldenable

" 设置折叠区域的宽度
set foldcolumn=0

" 设置折叠层数为1
"setlocal foldlevel=1

"C语言样式折叠，只使用默认的
set foldmarker={,}

"折叠标记
set foldmethod=marker

"打开折叠
set foldopen=block,hor,mark,percent,quickfix,tag

" 设置语法折叠
"if (version >= 700)
"    set foldmethod=syntax
"endif
highlight Folded cterm=NONE ctermfg=darkgray ctermbg=NONE
highlight FoldColumn cterm=NONE ctermfg=NONE ctermbg=NONE

" 用空格键来开关折叠
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
nnoremap zo zO<CR>
nnoremap zc zC<CR>

"set foldtext=SimpleFoldText() "自定义文本功能

"---------------------------------------------------------------------------
"some useful mappings

"Tlist plugin
nnoremap<F5> :Tlist<CR>
"nnoremap<F9> :TlistOpen<CR>
"nnoremap<F10> :TlistClose<CR>
"omni-completion key set (default: <C-x><C-o>)
inoremap <F2> <C-x><C-o>

"build tags of your own project with CTRL+F12
"map <C-F12> :!ctags -R -c++-kinds=+p -fields=+iaS -extra=+q .<CR>
"noremap <F12> :!ctags -R -c++-kinds=+p -fields=+iaS -extra=+q .<cr>
"inoremap <F12> <Esc>:!ctags -R -c++-kinds=+p -fields=+iaS -extra=+q .<cr>
"---------------------------------------------------------------------------
" plugin 设置 "
"---------------------------------------------------------------------------
"ctags 设置
"set tags+=~/.vim/tags/systags
"set tags+=~/.vim/tags/qttags
"set tags+=~/.vim/tags/xmltags
"set tags+=~/.vim/tags/stltags

"For ctags, then it can find the 'tags' file even not in current directory
set tags=tags;
"set autochdir

"设置taglist
let Tlist_Ctags_Cmd='/usr/bin/ctags'

"显示多个文件的tags
let Tlist_Show_One_File=1

"非当前文件，函数列表折叠隐藏
let Tlist_File_Flod_Auto_Close=1

"在taglist是最后一个窗口时退出vim
let Tlist_Exit_OnlyWindow=1

"单击:1 双击：0
"双击时跳转
let Tlist_Use_SingleClick=0

"打开taglist时获得输入焦点
let Tlist_GainFocus_On_ToggleOpen=1

"不管taglist窗口是否打开，始终解析文件中的tag
let Tlist_Process_File_Always=0

"在左侧窗口中显示taglist窗口
let Tlist_Use_Left_Window=1

let Tlist_Auto_Open=0
let Tlist_Auto_Update=1
let Tlist_Hightlight_Tag_On_BufEnter=1
let Tlist_Display_Prototype=0
let Tlist_Compact_Format=1
"let Tlist_Sort_Type="name"
let Tlist_Sort_Type="order"
let Tlist_Show_Menu=1
let Tlist_Enable_Fold_Column=0 "do show folding tree
let Tlist_Close_OnSelect=1
let Tlist_Inc_Winwidth=0
let Tlist_WinWidth=25

let g:tlist_javascript_settings='javascript;s:string;a:array;o:object;f:function;m:member'
let g:tlist_php_settings='php;c:Classes;f:Functions;d:Constants;j:Javascript Functions'
let tlist_css_settings = 'css;e:SECTIONS'
let tlist_python_settings = 'python;c:CLASSES;f:METHODS;p:PROPERTIES'

"---------------------------------------------------------------------------
" OmniCppComplete 设置
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
"let OmniCpp_ShowPrototypeInAbbr = 1
"let OmniCpp_SelectFirstItem = 2
let OmniCpp_MayCompleteDot = 1
let OmniCpp_MayCompleteArrow = 1
let OmniCpp_MayCompleteScope = 1
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
set completeopt=menuone,menu,longest,preview

"自动打开/关闭弹出菜单/预览窗口
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
"---------------------------------------------------------------------------
"gundo 设置
"default width:45
"default height:15
let g:gundo_width=40
let g:gundo_preview_height=15
let g:gundo_left=1
"---------------------------------------------------------------------------
"Lisp syntax
"let g:lisp_rainbow=1
"---------------------------------------------------------------------------
"html setting
"let g:no_html_toolbar=1
"let g:do_xhtml_mappings='yes'
"let g:html_tag_case='lowercase'
"---------------------------------------------------------------------------
"Tohtml setting
"let html_number_lines=0
"let use_xhtml=1
"let html_use_css=1
"--------------------------------------------------------------------------"
" Functions "
"--------------------------------------------------------------------------"
"python specific stuff
function! PythonLoad()
syn match pythonError "^\s*def\s\+\w\+(.*)\s*$" display
syn match pythonError "^\s*class\s\+\w\+(.*)\s*$" display
syn match pythonError "^\s*for\s.*[^:]$" display
syn match pythonError "^\s*except\s*$" display
syn match pythonError "^\s*finally\s*$" display
syn match pythonError "^\s*try\s*$" display
syn match pythonError "^\s*else\s*$" display
syn match pythonError "^\s*else\s*[^:].*" display
"syn match pythonError "^\s*if\s.*[^\:]$" display
syn match pythonError "^\s*except\s.*[^\:]$" display
syn match pythonError "[;]$" display
syn keyword pythonError do

let python_highlight_all=1
let python_highlight_builtins=1
let python_highlight_exceptions=1
let python_highlight_string_formatting=1
let python_highlight_sting_templates=1
let python_highlight_indent_errors=1
let python_highlight_space_errors=1
let python_highlight_doctests=1

endfunction

"Syntax checking entire file
"Usage： :make(检查文件）
" :list (查看错误列表）
" :cn,:cp(move around list of errors）

autocmd BufRead *.py set makeprg=python\ -c\ \"import\ py_compile,sys;\ sys.stderr=sys.stdout;\ py_compile.compile(r'%')\"
autocmd BufRead *.py set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m

augroup PYTHON
au BufNewFile,BufRead *.py setlocal expandtab foldmethod=indent
au BufRead *.py set smartindent cinwords=class,def,elif,else,except,finally,for,if,try,while
au BufNewFile,BufRead *.py abbr init __init__(self,
au BufNewFile,BufRead *.py abbr ifname if __name__ == "__main__":
au BufNewFile,BufRead imap <silent> <buffer> . .<C-X><C-O>
" Pyhton file template
autocmd BufNewFile *.py call setline(1,'#!/usr/bin/env python') |
\ call setline(2,'') |
\ call setline(3,'#coding:utf-8') |
\ call setline(4,'') |
\ call setline(5,'') |
\ exe "normal G"
augroup END

"---------------------------------------------------------------------------
"折叠后，显示的文本内容
function! SimpleFoldText()
let line = getline(v:foldstart)

let nucolwidth = &fdc + &number * &numberwidth
let windowwidth = winwidth(0) - nucolwidth - 3
let foldedlinecount = v:foldend - v:foldstart

" expand tabs into spaces
let onetab = strpart(' ', 0, &tabstop)
let line = substitute(line, '\t', onetab, 'g')

let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
let fillcharcount = windowwidth - len(line) - len(foldedlinecount) - 4
return line . ' …' . repeat(" ",fillcharcount) . foldedlinecount . ' '
endfunction

"---------------------------------------------------------------------------
"JavaScript Fold
function! JavaScriptFold()
"setl foldmethod=syntax
"setl foldlevelstart=1
syn region foldBraces start=/{/ end=/}/ transparent fold keepend extend

function! FoldText()
return substitute(getline(v:foldstart), '{.*', '{...}', '')
endfunction
setl foldtext=FoldText()
endfunction

autocmd FileType javascript call JavaScriptFold()
autocmd FileType javascript setl fen

"Java specific stuff
function! JavaLoad()
let java_highlight_all=1
let java_highlight_debug=1
let java_ignore_javadoc=1
let java_highlight_functions=1
let java_mark_braces_in_parens_as_errors=1
endfunction
"---------------------------------------------------------------------------
"ruby setting
function! RubyLoad()
let g:rubycomplete_buffer_loading=1
let g:rubycomplete_rails=1
let g:rubycomplete_classes_in_global=1
let g:rubycomplete_include_object=1
let g:rubycomplete_include_objectspace=1
endfunction

"---------------------------------------------------------------------------
" Add colors for some C99 stuff
function! CLoad()
let c_C99=1
let c_c_vim_compatible=1
let c_comment_strings=1
let c_comment_numbers=1
let c_comment_types=1
let c_warn_nested_comments=1
let c_cpp_comments=1
let c_ansi_typedefs=1
let c_ansi_constants=1
let c_posix=1
let c_comment_date_time=1
let c_minlines=25
let c_C89=1
let c_gnu=1
let c_syntax_for_h=1
endfunction
autocmd FileType c call CLoad()

"---------------------------------------------------------------------------
"colorscheme
"set background=dark
"colorscheme gentooish
if $TERM =~ '^xterm'
set t_Co=256
elseif $TERM =~ '^screen-bce'
set t_Co=256
elseif $TERM =~ '^rxvt'
set t_Co=88
elseif $TERM =~ '^linux'
set t_Co=8
else
set t_Co=16
endif

set t_Sb=^[[4%dm
set t_Sf=^[[3%dm

"highlight CursorLine cterm=NONE ctermfg=NONE ctermbg=NONE
"highlight Comment cterm=NONE ctermfg=darkred ctermbg=NONE guifg=darkred
"---------------------------------------------------------------------------
"
"function! QfMakeConv()
"    let qflist = getqflist()
"    for i in qflist
"        let i.text = iconv(i.text, "cp936", "utf-8")
"    endfor
"    call setqflist(qflist)
"endfunction

"au QuickfixCmdPost make call QfMakeConv()

map mak :!make<CR>

let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1

nnoremap <silent> <F3> :Grep <CR>

set cscopequickfix=s-,c-,d-,i-,t-,e-

"if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
"set fileencodings=utf-8,latin1
"endif


"if has("cscope") && filereadable("/usr/bin/cscope")
if has("cscope")
   set csprg=/usr/bin/cscope
   set csto=0
   set cst
   set nocsverb
   " add any database in current directory
   if filereadable("cscope.out")
      cs add cscope.out
   " else add database pointed to by environment
   elseif $CSCOPE_DB != ""
      cs add $CSCOPE_DB
   " else add database in parent directory
   else 
      let cscope_file=findfile("cscope.out",".;")
      let cscope_pre=matchstr(cscope_file,".*/")
      if !empty(cscope_file) && filereadable(cscope_file) 
          exe "cs add" cscope_file cscope_pre 
      endif
   endif
   set csverb
endif

" show file encodings
" nmap ,s :set enc fenc fencs tenc<CR>

" cscope quick command.
nmap ,s :cs find s <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap ,g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap ,c :cs find c <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap ,t :cs find t <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap ,e :cs find e <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap ,f :cs find f <C-R>=expand("<cfile>")<CR><CR>:copen<CR>
nmap ,i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>:copen<CR>
nmap ,d :cs find d <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap ,b <C-o>
nmap ff :cs f f 

"vim quick command.
nmap ee :edit 
nmap ss :ls<CR>
nmap ;  : 
nmap .b :b 

" quick fix NEXT/PREVIOS
nmap ,cn :cnext<CR>
nmap ,cp :cp<CR>
nmap ,, :clist<CR>
nmap .. :cclose<CR>

"多屏时屏幕切换
nmap .w <C-w>w

"分成上下两屏
nmap .s <C-w>s

"分成左右两屏
nmap .v <C-w>v

nmap .h <C-w>h
nmap .j <C-w>j

"退出与保存
nmap q :q<CR>
nmap fq :q!<CR>
nmap sq :wq<CR>
nmap sw :w<CR>

"跳转到文件末尾
nmap bb G

"上下翻页
nmap .f <C-f>
nmap .d <C-d>

"将vim切换到后台
nmap fb <C-z>

nmap <C-j> <C-W><C-J> nmap <C-k> <C-W><C-K> nmap <C-h> <C-W><C-H> nmap <C-l> <C-W><C-L> nmap F <C-F> nmap B <C-B> 
vnoremap <C-C> "+y
"map <C-V>		"+gP

" hide *.o, *.cmd
let g:netrw_list_hide='\.cmd$'
"let g:netrw_list_hide='\.o$,\.cmd$'

cabbr <expr> %% expand('%:p:h')

